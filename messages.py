from telebot import formatting
from telebot import types

from main import Task

help_msg = f'–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:\n' \
           f'- {formatting.hcode("/start")} - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n' \
           f'- {formatting.hcode("/help")} - –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n' \
           f'- {formatting.hcode("–ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")} - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á\n' \
           f'- {formatting.hcode("–°–ø–∏—Å–∫–∏ –∑–∞–¥–∞—á")} - –≤—ã–≤–æ–¥ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á\n' \
           f'- {formatting.hcode("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")} - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á\n' \
           f'- {formatting.hcode("–£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")} - —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á\n' \
           f'- {formatting.hcode("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")} - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏\n' \
           f'- {formatting.hcode("–ó–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–∫–µ")} - –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –≤—ã–±–∞—Ä–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ\n' \
           f'- {formatting.hcode("‚úÖ/‚ùå")} - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏\n' \
           f'- {formatting.hcode("üóë")} - —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏\n' \
           f'–ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –Ω–∞–∂–∞—Ç–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ, –ø–æ—ç—Ç–æ–º—É –Ω–µ –Ω—É–∂–Ω–æ –Ω–∞–±–∏—Ä–∞—Ç—å –∏—Ö –≤—Ä—É—á–Ω—É—é'
start_msg = f'–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á.\n' \
            f'–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏—Ç–µ {formatting.hcode("/help")}'
add_new_task_list_msg = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á'
success_add_new_task_list = '–ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω'

no_lists = f'–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.\n' \
           f'–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞–∂–∞–≤ {formatting.hcode("–ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")}'


def prepare_show_lists_msg(lists_name: dict.keys):
    keyboard = types.InlineKeyboardMarkup()
    show_list_msg = '–¢–µ–∫—É—â–∏–µ —Å–ø–∏—Å–∫–∏ –∑–∞–¥–∞—á:'
    for i in lists_name:
        inline_button = types.InlineKeyboardButton(text=i, callback_data=i)
        keyboard.add(inline_button)
    return show_list_msg, keyboard


success_choose_list = '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á "{}" —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω!'
rename_message = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á'

same_names = f'–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ —Å—Ç–∞—Ä—ã–º. ' \
             f'–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É {formatting.hcode("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")} –∏ –≤–≤–µ–¥–∏—Ç–µ {formatting.hbold("–Ω–æ–≤–æ–µ")} ' \
             f'–∏–º—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á'
rename_success = '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ'
remove_list_msg = f'–í—ã —É–≤–µ—Ä–µ–Ω–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á?'
success_remove_list = '–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω'
new_task = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏'
success_create_task = '–ó–∞–¥–∞—á–∞ "{}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ "{}"'


def prepare_no_tasks_msg(ls_name):
    msg = f'–í —Å–ø–∏—Å–æ–∫ "{ls_name}" –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏.\n' \
          f'–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –º–æ–∂–Ω–æ –∫–Ω–æ–ø–∫–æ–π {formatting.hcode("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")}'
    return msg


list_not_remove = '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–µ –±—ã–ª —É–¥–∞–ª—ë–Ω'


def prepare_show_tasks_msg(res_list: [Task], key: str):
    msg = f'–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–∫–µ "{key}":\n'
    keyboard = types.InlineKeyboardMarkup()
    for i in res_list:
        i: Task
        task_name_button = types.InlineKeyboardButton(text=i.name, callback_data='task')
        task_status_button = None
        if i.status:
            task_status_button = types.InlineKeyboardButton(text='‚úÖ', callback_data=i.name)
        elif not i.status:
            task_status_button = types.InlineKeyboardButton(text='‚ùå', callback_data=i.name)
        to_trash_button = types.InlineKeyboardButton(text='üóë', callback_data=f'{i.name} to_trash')
        keyboard.add(task_name_button, task_status_button, to_trash_button, row_width=4)
    return msg, keyboard


remove_task_msg = '–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
echo_message = f'–ë–æ—Ç –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n' \
               f'–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π {formatting.hcode("/help")} —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞'
command_in_text_msg = '–í –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∫–æ–º–∞–Ω–¥—ã.\n' \
                      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–º—ë–Ω –∑–∞–¥–∞—á –∏ –∏–º—ë–Ω —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á!'
